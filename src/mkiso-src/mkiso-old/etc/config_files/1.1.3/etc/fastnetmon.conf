#
# fastnetmon.conf for fastnetmon version: _fastnetmonversion_
#
### ### Main configuration params ### 
### Logging configuration

# enable this option if you want to send logs to local syslog facility
logging:local_syslog_logging = __local_syslog_logging__

# enable this option if you want to send logs to a remote syslog server via UDP
logging:remote_syslog_logging = __remote_syslog_logging__

# specify a custom server and port for remote logging
logging:remote_syslog_server = __remote_syslog_server__
logging:remote_syslog_port = __remote_syslog_port__

# Enable/Disable any actions in case of attack
enable_ban = __enable_ban__

# disable processing for certain direction of traffic
process_incoming_traffic = __process_incoming_traffic__
process_outgoing_traffic = __process_outgoing_traffic__

# How many packets will be collected from attack traffic
ban_details_records_count = __ban_details_records_count__

# How long (in seconds) we should keep an IP in blocked state
# If you set 0 here it completely disables unban capability
ban_time = __ban_time__

# Check if the attack is still active, before triggering an unban callback with this option
# If the attack is still active, check each run of the unban watchdog
unban_only_if_attack_finished = __unban_only_if_attack_finished__

# enable per subnet speed meters
# For each subnet, list track speed in bps and pps for both directions
enable_subnet_counters = __enable_subnet_counters__

# list of all your networks in CIDR format
networks_list_path = __networks_list_path__

# list networks in CIDR format which will be not monitored for attacks
white_list_path = __white_list_path__

# redraw period for client's screen
check_period = __check_period__

# Connection tracking is very useful for attack detection because it provides huge amounts of information,
# but it's very CPU intensive and not recommended in big networks
enable_connection_tracking = __enable_connection_tracking__

# Different approaches to attack detection
ban_for_pps = __ban_for_pps__
ban_for_bandwidth = __ban_for_bandwidth__
ban_for_flows = __ban_for_flows__

# Limits for Dos/DDoS attacks
threshold_pps = __threshold_pps__
threshold_mbps = __threshold_mbps__
threshold_flows = __threshold_flows__

# Per protocol attack thresholds
# We don't implement per protocol flow limits, sorry :(
# These limits should be smaller than global pps/mbps limits

threshold_tcp_mbps = __threshold_tcp_mbps__
threshold_udp_mbps = __threshold_udp_mbps__
threshold_icmp_mbps = __threshold_icmp_mbps__

threshold_tcp_pps = __threshold_tcp_pps__
threshold_udp_pps = __threshold_udp_pps__
threshold_icmp_pps = __threshold_icmp_pps__

ban_for_tcp_bandwidth = __ban_for_tcp_bandwidth__
ban_for_udp_bandwidth = __ban_for_udp_bandwidth__
ban_for_icmp_bandwidth = __ban_for_icmp_bandwidth__

ban_for_tcp_pps = __ban_for_tcp_pps__
ban_for_udp_pps = __ban_for_udp_pps__
ban_for_icmp_pps = __ban_for_icmp_pps__

###
### Traffic capture methods
###

# PF_RING traffic capture, fast enough but the wirespeed version needs a paid license
mirror = __mirror__

# Port mirroring sample rate
pfring_sampling_ratio = __pfring_sampling_ratio__

# Netmap traffic capture (very fast but needs patched drivers)
mirror_netmap = __mirror_netmap__

# SnabbSwitch traffic capture
mirror_snabbswitch = __mirror_snabbswitch__

# AF_PACKET capture engine
# Please use it only with modern Linux kernels (3.6 and more)
# And please install birq for irq ditribution over cores
mirror_afpacket = __mirror_afpacket__

# use PCI-e addresses here instead of OS device names. You can find them in "lspci" output
#interfaces = eth1

# Port mirroring sampling ratio
netmap_sampling_ratio = __netmap_sampling_ratio__

# This option should be enabled if you are using Juniper with mirroring of the first X bytes of packet: maximum-packet-length 110;
netmap_read_packet_length_from_ip_header = __netmap_read_packet_length_from_ip_header__

# Pcap mode, very slow and thus not suitable for production
pcap = __pcap__
# Netflow capture method with v5, v9 and IPFIX support
netflow = __netflow__
# sFLOW capture suitable for switches
sflow = __sflow__

# PF_RING configuration
# If you have a license for PF_RING ZC, enable this mode and it might achieve wire speed for 10GE
enable_pf_ring_zc_mode = __enable_pf_ring_zc_mode__

# Configuration for netmap, mirror, pcap modes
# For pcap and PF_RING we could specify "any"
# For netmap and PF_RING we could specify multiple interfaces = eth0,eth1,eth2
interfaces = __interfaces__

# We use average values for traffic speed to certain IP and we calculate average over this time slice
average_calculation_time = __average_calculation_time__

# We use average values for traffic speed for subnet and we calculate average over this time slice
average_calculation_time_for_subnets = __average_calculation_time_for_subnets__

# Netflow configuration

# it's possible to specify multiple ports here, using commas as delimiter
netflow_port = __netflow_port__
netflow_host = __netflow_host__

# To bind to all interfaces = eth0,eth1,eth2
# To bind to all interfaces = eth0,eth1,eth2
# To bind to localhost for a specific protocol:      ::1 or 127.0.0.1

# Netflow v9 and IPFIX agents use different and very complex approaches for notifying about sample ratio
# Here you could specify a sampling ratio for all this agents
# For NetFLOW v5 we extract sampling ratio from packets directely and this option not used
netflow_sampling_ratio = __netflow_sampling_ratio__

# In some cases with NetFlow we could get huge bursts related to aggregated data nature
# We could try to get smoother data with this option, i.e. we will divide counters on collection interval time
netflow_divide_counters_on_interval_length = __netflow_divide_counters_on_interval_length__

# Process each netflow packet with LUA
# This option is not default and you need build it additionally
# netflow_lua_hooks_path = /usr/src/fastnetmon/src/netflow_hooks.lua

# sFLOW configuration

# It's possible to specify multiple ports here, using commas as delimiter
sflow_port = __sflow_port__
# sflow_port = 6343,6344
sflow_host = __sflow_host__

# process each sFLOW packet with LUA
# This option is not default and you need build it additionally
# sflow_lua_hooks_path = /usr/src/fastnetmon/src/sflow_hooks.lua

###
### Actions when attack detected
###

# This script executed for ban, unban and attack detail collection
#notify_script_path = /usr/local/bin/notify_about_attack.sh
notify_script_path = __notify_script_path__

# pass attack details to notify_script via stdin
# Pass details only in case of "ban" call
# No details will be passed for "unban" call
notify_script_pass_details = __notify_script_pass_details__

# collect a full dump of the attack with full payload in pcap compatible format
collect_attack_pcap_dumps = __collect_attack_pcap_dumps__

# Execute Deep Packet Inspection on captured PCAP packets
process_pcap_attack_dumps_with_dpi = __process_pcap_attack_dumps_with_dpi__

# Save attack details to Redis
redis_enabled = __redis_enabled__

# Redis configuration
redis_port = __redis_port__
redis_host = __redis_host__

# specify a custom prefix here
redis_prefix = __redis_prefix__

# We could store attack information to MongoDB
mongodb_enabled = __mongodb_enabled__
mongodb_host = __mongodb_host__
mongodb_port = __mongodb_port__
mongodb_database_name = __mongodb_database_name__

# If you are using PF_RING non ZC version you could block traffic on host with hardware filters
# Please be aware! We can not remove blocks with this action plugin
pfring_hardware_filters_enabled = __pfring_hardware_filters_enabled__

# announce blocked IPs with BGP protocol with ExaBGP
exabgp = __exabgp__
exabgp_command_pipe = __exabgp_command_pipe__
exabgp_community = __exabgp_community__

# specify multiple communities with this syntax:
# exabgp_community = [65001:666 65001:777]

# specify different communities for host and subnet announces
# exabgp_community_subnet = 65001:667
# exabgp_community_host = 65001:668

exabgp_next_hop = __exabgp_next_hop__

# In complex cases you could have both options enabled and announce host and subnet simultaneously

# Announce /32 host itself with BGP
exabgp_announce_host = __exabgp_announce_host__

# Announce origin subnet of IP address instead IP itself
exabgp_announce_whole_subnet = __exabgp_announce_whole_subnet__

# Announce Flow Spec rules when we could detect certain attack type
# Please we aware! Flow Spec announce triggered when we collect some details about attack,
# i.e. when we call attack_details script
# Please disable exabgp_announce_host and exabgp_announce_whole_subnet if you want to use this feature
# Please use ExaBGP v4 only (Git version), for more details: https://github.com/FastVPSEestiOu/fastnetmon/blob/master/docs/BGP_FLOW_SPEC.md
exabgp_flow_spec_announces = __exabgp_flow_spec_announces__

# GoBGP intergation
gobgp = __gobgp__
gobgp_next_hop = __gobgp_next_hop__
gobgp_announce_host = __gobgp_announce_host__
gobgp_announce_whole_subnet = __gobgp_announce_whole_subnet__

# Graphite monitoring
# InfluxDB is also supported, please check our reference:
# https://github.com/FastVPSEestiOu/fastnetmon/blob/master/docs/INFLUXDB_INTEGRATION.md
graphite = __graphite__
graphite_host = __graphite_host__
graphite_port = __graphite_port__

# Default namespace for Graphite data
graphite_prefix = __graphite_prefix__

# Add local IP addresses and aliases to monitoring list
# Works only for Linux
monitor_local_ip_addresses = __monitor_local_ip_addresses__

# Create group of hosts with non-standard thresholds
# You should create this group before (in configuration file) specifying any limits
#hostgroup = my_hosts:10.10.10.221/32,10.10.10.222/32

# Configure this group
#my_hosts_enable_ban = off

#my_hosts_ban_for_pps = off
#my_hosts_ban_for_bandwidth = off
#my_hosts_ban_for_flows = off

#my_hosts_threshold_pps = 20000
#my_hosts_threshold_mbps = 1000
#my_hosts_threshold_flows = 3500

# Path to pid file for checking "if another copy of tool is running", it's useful when you run multiple instances of tool
pid_path = __pid_path__

# Path to file where we store information for fastnetmon_client
cli_stats_file_path = __cli_stats_file_path__

# Enable gRPC api (required for fastnetmon_api_client tool)
enable_api = __enable_api__

###
### Client configuration
###

# Field used for sorting in client, valid values are: packets, bytes or flows
sort_parameter = __sort_parameter__
# How much IPs will be listed for incoming and outgoing channel eaters
max_ips_in_list = __max_ips_in_list__
