#!/usr/bin/perl -w
#
# $Header$
#
#   Copyright 2017, DeiC, Niels Thomas Haugård
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
#
#
################################################################################
#
# -r: read from files
# -d: read from databse
# -w: write to files / database
# -p: print/dump to stdout
#
################################################################################

#
# Requirements
#
use DBI;                # database
use Digest::MD5;
use English;
use File::Basename;
use File::Copy;
use File::Temp qw(tempfile);
use FileHandle;
use Getopt::Long qw(:config no_ignore_case);
use Net::SSH2;          # ssh v2 access to postgres db
use NetAddr::IP;
use POSIX;              # only needed for logit
use Sys::Hostname;
use Sys::Syslog;        # only needed for logit
use Time::Piece;
use sigtrap qw(die normal-signals);
use Path::Tiny;
use Data::Dumper::Simple;
use File::Basename;
use File::Path qw(make_path);

#
#
# Global vars
#
my $read_from_files = 0;
my $read_from_db	= 0;
my $write_to		= 0;
my $print_to_stdout	= 0;
my $verbose			= 0;
my $show_version	= 0;

my $usage = "
	usage:

	$0	[-v] -f | -r | -p | -u | -w hostname
		-f: Read info from files
		-d: Read info from database
		-u: Update remote FastNetMon with config changes
		-v: Print verbose information
		-w: Write to db if read from file and file if read from db
	$0 -V
	$0 -h: help
		
		Hostname: a specific fastnetmon

		-V: Print version and exit

		-s: generate and save ssh keys
		-o: generate and save OpenVPN keys
		-n: update nds with hostname / ip address information

";

my $specific_hostname		= "";

my $specific_config_dir = "/opt/mkiso/specific";
my $pathname		 = "";
my $specific_config_file_dir = ""; 		# $specific_config_dir / hostname / data/config_files

my $inicfg  = "/opt/db2dps/etc/db.ini";
my $dbuser	= "";
my $dbpass	= "";
my $db		= "";

my $latest_fastnetmonversion = "1.1.3";

my $config_file_template_dir = "/opt/mkiso/etc/config_files";	# append $fastnetmonversion

my @files = (
	'opt/i2dps/etc/fnm2db.ini',
	'opt/i2dps/etc/ssh/id_ed25519',
	'opt/i2dps/etc/ssh/id_ed25519.pub',
	'etc/networks_whitelist',
	'etc/fastnetmon.conf',
	'etc/networks_list',
	'etc/networks_whitelist',
	'etc/networks_list',
	'etc/openvpn/openvpn.conf',
	'etc/openvpn/openvpn.key',
	'etc/openvpn/openvpn.p12',
	'etc/openvpn/openvpn.txt',
);

my ($fastnetmon_instanceid, $customerid, $mode, $internet_if, $lan_if,
	$fastnetmon_if, $gw, $vpn_ip_addr, $hostname, $key, $ovpn, $p12, $usr,
	$password, $fastnetmoninstanceid, $uuid, $administratorid, $blocktime,
	$public_ssh_key_for_upload_to_ddps, $private_ssh_key_for_upload_to_ddps,
	$networks_whitelist, $fastnetmonversion, $local_syslog_logging,
	$remote_syslog_logging, $remote_syslog_server, $remote_syslog_port,
	$enable_ban, $process_incoming_traffic, $process_outgoing_traffic,
	$ban_details_records_count, $ban_time, $unban_only_if_attack_finished,
	$enable_subnet_counters, $networks_list_path, $white_list_path,
	$check_period, $enable_connection_tracking, $ban_for_pps,
	$ban_for_bandwidth, $ban_for_flows, $threshold_pps, $threshold_mbps,
	$threshold_flows, $threshold_tcp_mbps, $threshold_udp_mbps,
	$threshold_icmp_mbps, $threshold_tcp_pps, $threshold_udp_pps,
	$threshold_icmp_pps, $ban_for_tcp_bandwidth, $ban_for_udp_bandwidth,
	$ban_for_icmp_bandwidth, $ban_for_tcp_pps, $ban_for_udp_pps,
	$ban_for_icmp_pps, $mirror, $pfring_sampling_ratio, $mirror_netmap,
	$mirror_snabbswitch, $mirror_afpacket, $netmap_sampling_ratio,
	$netmap_read_packet_length_from_ip_header, $pcap, $netflow, $sflow,
	$enable_pf_ring_zc_mode, $interfaces, $average_calculation_time,
	$average_calculation_time_for_subnets, $netflow_port, $netflow_host,
	$netflow_sampling_ratio, $netflow_divide_counters_on_interval_length,
	$netflow_lua_hooks_path, $sflow_port, $sflow_host, $notify_script_path,
	$notify_script_pass_details, $collect_attack_pcap_dumps,
	$process_pcap_attack_dumps_with_dpi, $redis_enabled, $redis_port,
	$redis_host, $redis_prefix, $mongodb_enabled, $mongodb_host, $mongodb_port,
	$mongodb_database_name, $pfring_hardware_filters_enabled, $exabgp,
	$exabgp_command_pipe, $exabgp_community, $exabgp_community_subnet,
	$exabgp_community_host, $exabgp_next_hop, $exabgp_announce_host,
	$exabgp_announce_whole_subnet, $exabgp_flow_spec_announces, $gobgp,
	$gobgp_next_hop, $gobgp_announce_host, $gobgp_announce_whole_subnet,
	$graphite, $graphite_host, $graphite_port, $graphite_prefix,
	$monitor_local_ip_addresses, $hostgroup, $my_hosts_enable_ban,
	$my_hosts_ban_for_pps, $my_hosts_ban_for_bandwidth,
	$my_hosts_ban_for_flows, $my_hosts_threshold_pps,
	$my_hosts_threshold_mbps, $my_hosts_threshold_flows, $pid_path,
	$cli_stats_file_path, $enable_api, $sort_parameter, $max_ips_in_list,
	$networks_list);


################################################################################
# included from version.pm
#INCLUDE_VERSION_PM
################################################################################

#
# prototypes
#
sub main(@);
sub logit(@);
sub mydie(@);
sub	parseini();
sub read_from_files();
sub read_from_db();
sub write_to_db();
sub wtite_to_files();
sub print_to_stdout();

################################################################################
# MAIN
################################################################################

main();

exit(0);


#
# Subs
#
sub main(@) {
	if (!GetOptions(
		'read_from_files|f'	=> \$read_from_files,
		'read_from_db|d'	=> \$read_from_db,
		'write|w'			=> \$write_to,
		'print|p'			=> \$print_to_stdout,
		'verbose|v'			=> \$verbose,
		'show_version|V'	=> \$show_version
	))
	{
		print $usage;
		exit 0;
	}

	$specific_hostname = $ARGV[0];
	if (defined $specific_hostname and length($specific_hostname))
	{
		logit("using hostname $specific_hostname");
	}
	else
	{
		print "hostname missing: $usage\n";
		exit 0;
	}
	
	$pathname = $specific_config_dir . "/" . $specific_hostname;
	

	if ($read_from_files && $read_from_db)
	{
		print "-r and -d are mutally exclusive\n"; exit 0;
	}

	if ($write_to == 0 && $print_to_stdout == 0)
	{
		print "please select output: -p stdout or DB/files\n"; exit 0;
	}

	if ($read_from_db == 0 && $read_from_files == 0)
	{
		print "Please select read form database -d or files -f\n";
		exit 0;
	}

	parseini();

	logit("read_from_files: $read_from_files");
	logit("read_from_db: $read_from_db");
	logit("write_to: $write_to");
	logit("print_to_stdout:	$print_to_stdout");

	if (-d $pathname) {
	  logit("found directory '$pathname' ok");
	  #  seems ok to now
	}
	elsif (-e _) {
	  print "error: $pathname exists, but is NOT a directory\n";
	  exit 0;
	}
	else {
	  print "hmm: $pathname does not exist\n";	# TODO: create if write to files
	  exit 0;
	}

	$specific_config_file_dir = $specific_config_dir . "/" . $specific_hostname . "/" . "data/config_files";

	if ( -d $specific_config_file_dir)
	{
		logit("found config dir: $specific_config_file_dir");

	} else
	{
		logit("config dir: $specific_config_file_dir does NOT exist");
	}

	if ($read_from_files)
	{
		read_from_files();
	}
	if ($read_from_db)
	{
		read_from_db();
	}

	if ($write_to)
	{
		if ($read_from_files)	{ write_to_db(); }
		if ($read_from_db)		{ write_to_files(); }
	}

	if ($print_to_stdout)
	{
		print_to_stdout();
	}

	exit 0;
}

sub read_from_db()	# write or read variables
{
	logit("reading values from db");

	my $driver  = "Pg";
	my $dsn = "DBI:$driver:dbname=$db;host=127.0.0.1;port=5432";
	my $dbh = DBI->connect($dsn, $dbuser, $dbpass, { RaiseError => 1 }) or die $DBI::errstr;

	$sql_query = <<EOF;
	SELECT 
					fastnetmon_instanceid,
					customerid,
					mode,
					internet_if,
					lan_if,
					fastnetmon_if,
					gw,
					vpn_ip_addr,
					hostname,
					key,
					ovpn,
					p12,
					usr,
					password,
					fastnetmoninstanceid,
					uuid,
					administratorid,
					blocktime,
					public_ssh_key_for_upload_to_ddps,
					private_ssh_key_for_upload_to_ddps,
					networks_whitelist,
					fastnetmonversion,
					local_syslog_logging,
					remote_syslog_logging,
					remote_syslog_server,
					remote_syslog_port,
					enable_ban,
					process_incoming_traffic,
					process_outgoing_traffic,
					ban_details_records_count,
					ban_time,
					unban_only_if_attack_finished,
					enable_subnet_counters,
					networks_list_path,
					white_list_path,
					check_period,
					enable_connection_tracking,
					ban_for_pps,
					ban_for_bandwidth,
					ban_for_flows,
					threshold_pps,
					threshold_mbps,
					threshold_flows,
					threshold_tcp_mbps,
					threshold_udp_mbps,
					threshold_icmp_mbps,
					threshold_tcp_pps,
					threshold_udp_pps,
					threshold_icmp_pps,
					ban_for_tcp_bandwidth,
					ban_for_udp_bandwidth,
					ban_for_icmp_bandwidth,
					ban_for_tcp_pps,
					ban_for_udp_pps,
					ban_for_icmp_pps,
					mirror,
					pfring_sampling_ratio,
					mirror_netmap,
					mirror_snabbswitch,
					mirror_afpacket,
					netmap_sampling_ratio,
					netmap_read_packet_length_from_ip_header,
					pcap,
					netflow,
					sflow,
					enable_pf_ring_zc_mode,
					interfaces,
					average_calculation_time,
					average_calculation_time_for_subnets,
					netflow_port,
					netflow_host,
					netflow_sampling_ratio,
					netflow_divide_counters_on_interval_length,
					netflow_lua_hooks_path,
					sflow_port,
					sflow_host,
					notify_script_path,
					notify_script_pass_details,
					collect_attack_pcap_dumps,
					process_pcap_attack_dumps_with_dpi,
					redis_enabled,
					redis_port,
					redis_host,
					redis_prefix,
					mongodb_enabled,
					mongodb_host,
					mongodb_port,
					mongodb_database_name,
					pfring_hardware_filters_enabled,
					exabgp,
					exabgp_command_pipe,
					exabgp_community,
					exabgp_community_subnet,
					exabgp_community_host,
					exabgp_next_hop,
					exabgp_announce_host,
					exabgp_announce_whole_subnet,
					exabgp_flow_spec_announces,
					gobgp,
					gobgp_next_hop,
					gobgp_announce_host,
					gobgp_announce_whole_subnet,
					graphite,
					graphite_host,
					graphite_port,
					graphite_prefix,
					monitor_local_ip_addresses,
					hostgroup,
					my_hosts_enable_ban,
					my_hosts_ban_for_pps,
					my_hosts_ban_for_bandwidth,
					my_hosts_ban_for_flows,
					my_hosts_threshold_pps,
					my_hosts_threshold_mbps,
					my_hosts_threshold_flows,
					pid_path,
					cli_stats_file_path,
					enable_api,
					sort_parameter,
					max_ips_in_list,
					networks_list
	FROM
		flow.fastnetmoninstances
	WHERE
		hostname = \'$specific_hostname\'
		;
EOF

	my $sth = $dbh->prepare($sql_query);
	
	$sth = $dbh->prepare($sql_query);
	$sth->execute();

	my $default_value = "null";

	# TODO set default values -- see database on create
	while (my @row = $sth->fetchrow_array)
	{
		$fastnetmon_instanceid                             =  $row[0] ?  $row[0] : $default_value;
		$customerid                                        =  $row[1] ?  $row[1] : $default_value;
		$mode                                              =  $row[2] ?  $row[2] : $default_value;
		$internet_if                                       =  $row[3] ?  $row[3] : $default_value;
		$lan_if                                            =  $row[4] ?  $row[4] : $default_value;
		$fastnetmon_if                                     =  $row[5] ?  $row[5] : $default_value;
		$gw                                                =  $row[6] ?  $row[6] : $default_value;
		$vpn_ip_addr                                       =  $row[7] ?  $row[7] : $default_value;
		$hostname                                          =  $row[8] ?  $row[8] : $default_value;
		$key                                               =  $row[9] ?  $row[9] : $default_value;
		$ovpn                                              = $row[10] ? $row[10] : $default_value;
		$p12                                               = $row[11] ? $row[11] : $default_value;
		$usr                                               = $row[12] ? $row[12] : $default_value;
		$password                                          = $row[13] ? $row[13] : $default_value;
		$fastnetmoninstanceid                              = $row[14] ? $row[14] : $default_value;
		$uuid                                              = $row[15] ? $row[15] : $default_value;
		$administratorid                                   = $row[16] ? $row[16] : $default_value;
		$blocktime                                         = $row[17] ? $row[17] : $default_value;
		$public_ssh_key_for_upload_to_ddps                 = $row[18] ? $row[18] : $default_value;
		$private_ssh_key_for_upload_to_ddps                = $row[19] ? $row[19] : $default_value;
		$networks_whitelist                                = $row[20] ? $row[20] : $default_value;
		$fastnetmonversion                                 = $row[21] ? $row[21] : $latest_fastnetmonversion;
		$local_syslog_logging                              = $row[22] ? $row[22] : $default_value;
		$remote_syslog_logging                             = $row[23] ? $row[23] : $default_value;
		$remote_syslog_server                              = $row[24] ? $row[24] : $default_value;
		$remote_syslog_port                                = $row[25] ? $row[25] : $default_value;
		$enable_ban                                        = $row[26] ? $row[26] : $default_value;
		$process_incoming_traffic                          = $row[27] ? $row[27] : $default_value;
		$process_outgoing_traffic                          = $row[28] ? $row[28] : $default_value;
		$ban_details_records_count                         = $row[29] ? $row[29] : $default_value;
		$ban_time                                          = $row[30] ? $row[30] : $default_value;
		$unban_only_if_attack_finished                     = $row[31] ? $row[31] : $default_value;
		$enable_subnet_counters                            = $row[32] ? $row[32] : $default_value;
		$networks_list_path                                = $row[33] ? $row[33] : $default_value;
		$white_list_path                                   = $row[34] ? $row[34] : $default_value;
		$check_period                                      = $row[35] ? $row[35] : $default_value;
		$enable_connection_tracking                        = $row[36] ? $row[36] : $default_value;
		$ban_for_pps                                       = $row[37] ? $row[37] : $default_value;
		$ban_for_bandwidth                                 = $row[38] ? $row[38] : $default_value;
		$ban_for_flows                                     = $row[39] ? $row[39] : $default_value;
		$threshold_pps                                     = $row[40] ? $row[40] : $default_value;
		$threshold_mbps                                    = $row[41] ? $row[41] : $default_value;
		$threshold_flows                                   = $row[42] ? $row[42] : $default_value;
		$threshold_tcp_mbps                                = $row[43] ? $row[43] : $default_value;
		$threshold_udp_mbps                                = $row[44] ? $row[44] : $default_value;
		$threshold_icmp_mbps                               = $row[45] ? $row[45] : $default_value;
		$threshold_tcp_pps                                 = $row[46] ? $row[46] : $default_value;
		$threshold_udp_pps                                 = $row[47] ? $row[47] : $default_value;
		$threshold_icmp_pps                                = $row[48] ? $row[48] : $default_value;
		$ban_for_tcp_bandwidth                             = $row[49] ? $row[49] : $default_value;
		$ban_for_udp_bandwidth                             = $row[50] ? $row[50] : $default_value;
		$ban_for_icmp_bandwidth                            = $row[51] ? $row[51] : $default_value;
		$ban_for_tcp_pps                                   = $row[52] ? $row[52] : $default_value;
		$ban_for_udp_pps                                   = $row[53] ? $row[53] : $default_value;
		$ban_for_icmp_pps                                  = $row[54] ? $row[54] : $default_value;
		$mirror                                            = $row[55] ? $row[55] : $default_value;
		$pfring_sampling_ratio                             = $row[56] ? $row[56] : $default_value;
		$mirror_netmap                                     = $row[57] ? $row[57] : $default_value;
		$mirror_snabbswitch                                = $row[58] ? $row[58] : $default_value;
		$mirror_afpacket                                   = $row[59] ? $row[59] : $default_value;
		$netmap_sampling_ratio                             = $row[60] ? $row[60] : $default_value;
		$netmap_read_packet_length_from_ip_header          = $row[61] ? $row[61] : $default_value;
		$pcap                                              = $row[62] ? $row[62] : $default_value;
		$netflow                                           = $row[63] ? $row[63] : $default_value;
		$sflow                                             = $row[64] ? $row[64] : $default_value;
		$enable_pf_ring_zc_mode                            = $row[65] ? $row[65] : $default_value;
		$interfaces                                        = $row[66] ? $row[66] : $default_value;
		$average_calculation_time                          = $row[67] ? $row[67] : $default_value;
		$average_calculation_time_for_subnets              = $row[68] ? $row[68] : $default_value;
		$netflow_port                                      = $row[69] ? $row[69] : $default_value;
		$netflow_host                                      = $row[70] ? $row[70] : $default_value;
		$netflow_sampling_ratio                            = $row[71] ? $row[71] : $default_value;
		$netflow_divide_counters_on_interval_length        = $row[72] ? $row[72] : $default_value;
		$netflow_lua_hooks_path                            = $row[73] ? $row[73] : $default_value;
		$sflow_port                                        = $row[74] ? $row[74] : $default_value;
		$sflow_host                                        = $row[75] ? $row[75] : $default_value;
		$notify_script_path                                = $row[76] ? $row[76] : $default_value;
		$notify_script_pass_details                        = $row[77] ? $row[77] : $default_value;
		$collect_attack_pcap_dumps                         = $row[78] ? $row[78] : $default_value;
		$process_pcap_attack_dumps_with_dpi                = $row[79] ? $row[79] : $default_value;
		$redis_enabled                                     = $row[80] ? $row[80] : $default_value;
		$redis_port                                        = $row[81] ? $row[81] : $default_value;
		$redis_host                                        = $row[82] ? $row[82] : $default_value;
		$redis_prefix                                      = $row[83] ? $row[83] : $default_value;
		$mongodb_enabled                                   = $row[84] ? $row[84] : $default_value;
		$mongodb_host                                      = $row[85] ? $row[85] : $default_value;
		$mongodb_port                                      = $row[86] ? $row[86] : $default_value;
		$mongodb_database_name                             = $row[87] ? $row[87] : $default_value;
		$pfring_hardware_filters_enabled                   = $row[88] ? $row[88] : $default_value;
		$exabgp                                            = $row[89] ? $row[89] : $default_value;
		$exabgp_command_pipe                               = $row[90] ? $row[90] : $default_value;
		$exabgp_community                                  = $row[91] ? $row[91] : $default_value;
		$exabgp_community_subnet                           = $row[92] ? $row[92] : $default_value;
		$exabgp_community_host                             = $row[93] ? $row[93] : $default_value;
		$exabgp_next_hop                                   = $row[94] ? $row[94] : $default_value;
		$exabgp_announce_host                              = $row[95] ? $row[95] : $default_value;
		$exabgp_announce_whole_subnet                      = $row[96] ? $row[96] : $default_value;
		$exabgp_flow_spec_announces                        = $row[97] ? $row[97] : $default_value;
		$gobgp                                             = $row[98] ? $row[98] : $default_value;
		$gobgp_next_hop                                    = $row[99] ? $row[99] : $default_value;
		$gobgp_announce_host                               = $row[100] ? $row[100] : $default_value;
		$gobgp_announce_whole_subnet                       = $row[101] ? $row[101] : $default_value;
		$graphite                                          = $row[102] ? $row[102] : $default_value;
		$graphite_host                                     = $row[103] ? $row[103] : $default_value;
		$graphite_port                                     = $row[104] ? $row[104] : $default_value;
		$graphite_prefix                                   = $row[105] ? $row[105] : $default_value;
		$monitor_local_ip_addresses                        = $row[106] ? $row[106] : $default_value;
		$hostgroup                                         = $row[107] ? $row[107] : $default_value;
		$my_hosts_enable_ban                               = $row[108] ? $row[108] : $default_value;
		$my_hosts_ban_for_pps                              = $row[109] ? $row[109] : $default_value;
		$my_hosts_ban_for_bandwidth                        = $row[110] ? $row[110] : $default_value;
		$my_hosts_ban_for_flows                            = $row[111] ? $row[111] : $default_value;
		$my_hosts_threshold_pps                            = $row[112] ? $row[112] : $default_value;
		$my_hosts_threshold_mbps                           = $row[113] ? $row[113] : $default_value;
		$my_hosts_threshold_flows                          = $row[114] ? $row[114] : $default_value;
		$pid_path                                          = $row[115] ? $row[115] : $default_value;
		$cli_stats_file_path                               = $row[116] ? $row[116] : $default_value;
		$enable_api                                        = $row[117] ? $row[117] : $default_value;
		$sort_parameter                                    = $row[118] ? $row[118] : $default_value;
		$max_ips_in_list                                   = $row[119] ? $row[119] : $default_value;
		$networks_list                                     = $row[120] ? $row[120] : $default_value;
	}
	$sth->finish();

	# create commented template files
	# do search / replace on all values for each file
}

sub print_to_stdout()	# write or read variables
{
	warn Dumper($fastnetmon_instanceid, $customerid, $mode, $internet_if, $lan_if,
		$fastnetmon_if, $gw, $vpn_ip_addr, $hostname, $key, $ovpn, $p12, $usr,
		$password, $fastnetmoninstanceid, $uuid, $administratorid, $blocktime,
		$public_ssh_key_for_upload_to_ddps, $private_ssh_key_for_upload_to_ddps,
		$networks_whitelist, $fastnetmonversion, $local_syslog_logging,
		$remote_syslog_logging, $remote_syslog_server, $remote_syslog_port,
		$enable_ban, $process_incoming_traffic, $process_outgoing_traffic,
		$ban_details_records_count, $ban_time, $unban_only_if_attack_finished,
		$enable_subnet_counters, $networks_list_path, $white_list_path,
		$check_period, $enable_connection_tracking, $ban_for_pps,
		$ban_for_bandwidth, $ban_for_flows, $threshold_pps, $threshold_mbps,
		$threshold_flows, $threshold_tcp_mbps, $threshold_udp_mbps,
		$threshold_icmp_mbps, $threshold_tcp_pps, $threshold_udp_pps,
		$threshold_icmp_pps, $ban_for_tcp_bandwidth, $ban_for_udp_bandwidth,
		$ban_for_icmp_bandwidth, $ban_for_tcp_pps, $ban_for_udp_pps,
		$ban_for_icmp_pps, $mirror, $pfring_sampling_ratio, $mirror_netmap,
		$mirror_snabbswitch, $mirror_afpacket, $netmap_sampling_ratio,
		$netmap_read_packet_length_from_ip_header, $pcap, $netflow, $sflow,
		$enable_pf_ring_zc_mode, $interfaces, $average_calculation_time,
		$average_calculation_time_for_subnets, $netflow_port, $netflow_host,
		$netflow_sampling_ratio, $netflow_divide_counters_on_interval_length,
		$netflow_lua_hooks_path, $sflow_port, $sflow_host, $notify_script_path,
		$notify_script_pass_details, $collect_attack_pcap_dumps,
		$process_pcap_attack_dumps_with_dpi, $redis_enabled, $redis_port,
		$redis_host, $redis_prefix, $mongodb_enabled, $mongodb_host, $mongodb_port,
		$mongodb_database_name, $pfring_hardware_filters_enabled, $exabgp,
		$exabgp_command_pipe, $exabgp_community, $exabgp_community_subnet,
		$exabgp_community_host, $exabgp_next_hop, $exabgp_announce_host,
		$exabgp_announce_whole_subnet, $exabgp_flow_spec_announces, $gobgp,
		$gobgp_next_hop, $gobgp_announce_host, $gobgp_announce_whole_subnet,
		$graphite, $graphite_host, $graphite_port, $graphite_prefix,
		$monitor_local_ip_addresses, $hostgroup, $my_hosts_enable_ban,
		$my_hosts_ban_for_pps, $my_hosts_ban_for_bandwidth,
		$my_hosts_ban_for_flows, $my_hosts_threshold_pps,
		$my_hosts_threshold_mbps, $my_hosts_threshold_flows, $pid_path,
		$cli_stats_file_path, $enable_api, $sort_parameter, $max_ips_in_list,
		$networks_list);
}

sub write_to_db()
{
	logit("in write to db");
}

sub write_to_files()
{
	logit("$config_file_template_dir");
	logit("fastnetmon version: $fastnetmonversion, hostname: $hostname");
	foreach my $file (@files)
	{
		my $tmpl_file = $config_file_template_dir . "/" . $fastnetmonversion . "/" . $file;
		my $dest_file = $specific_config_file_dir . "/" . $file;
		my $dest_path =  dirname($dest_file);
		if ( -s $tmpl_file)
		{
			logit("src $tmpl_file");
			# read whole file
			my $content = path("$tmpl_file")->slurp_utf8;

			#print $content;
			# create dest. directory tree
			make_path $dest_path unless -d $dest_path;
			
			# mungle $template_content
			# see db2dps.pl +1251

			# write with replacement(s)
			path("$dest_file")->spew_utf8("$content");
			
		}
		else
		{
			logit("src $tmpl_file is empty or does not exist");
			exit 0;
		}
		logit("dst $dest_file");
	}
}

sub read_from_files()
{
	logit("in read from files");
	logit("fastnetmon version: $fastnetmonversion, hostname: $hostname, networks_list $networks_list cli_stats_file_path $cli_stats_file_path");
	foreach my $file (@files) { logit("file: $specific_config_file_dir/$fastnetmonversion/$file"); }
}

sub logit(@)
{
	my $msg = join(' ', @_);
	syslog("user|err", "$msg");
	my $now = strftime "%H:%M:%S (%Y/%m/%d)", localtime(time);
	print STDOUT "$now: $msg\n" if ($verbose);
}

sub mydie(@)
{
	logit(@_);
	exit(0);
}


sub parseini()
{
	open my $fh, '<', $inicfg or mydie("Could not open '$inicfg' $!");

	while (my $line = <$fh>)
	{
		if ($line =~ /^\s*#/)
		{
			next;	   # skip comments
		}
		if ($line =~ /^\s*$/)
		{
			next;	   # skip empty lines
		}

		if ($line =~ /^\[(.*)\]\s*$/)
		{
			$section = $1;
			next;
		}

		if ($line =~ /^([^=]+?)\s*=\s*(.*?)\s*$/)
		{
			my ($field, $value) = ($1, $2);
			if (not defined $section)
			{
				logit("Error in '$inicfg': Line outside of seciton '$line'");
				next;
			}
			$data{$section}{$field} = $value;
		}
	}

	$db		= $data{'general'}{'dbname'};
	$dbuser	= $data{'general'}{'dbuser'};
	$dbpass	= $data{'general'}{'dbpassword'};

}



__DATA__

