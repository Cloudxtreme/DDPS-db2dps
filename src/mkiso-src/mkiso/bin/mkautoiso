#!/bin/bash
#
# https://raw.githubusercontent.com/makelinux/mkautoiso/master/mkautoiso
# https://help.ubuntu.com/community/InstallCDCustomization/PreseedExamples
# https://github.com/netson/ubuntu-unattended
# https://github.com/netson/ubuntu-unattended/blob/master/netson.seed
#

VERSION="0.9"

function ubuntu-release()
{
	rel=http://releases.ubuntu.com/$1
	echo $rel/$(curl --silent $rel/MD5SUMS | \grep -o 'ubuntu-.*-server-amd64.iso')
}

function mkautoiso()
{
	all=($(wget -O- releases.ubuntu.com -q | perl -ne '/Ubuntu (\d+.\d+)/ && print "$1\n"' | sort -Vu))
	if [ "$1" == latest ]; then
		iso_url=$(ubuntu-release ${all[-1]})
		else
		if [ -z "$*" ]; then
			echo releases.ubuntu.com has ${all[*]}
			read -p "use version > " -e -i "${all[-1]}" v
			[ "$v" ] || v=${all[-1]}
			iso_url=$(ubuntu-release $v)
		else
			if expr match "${1}" "^http" > /dev/null; then
				iso_url="$1"
			else
				if expr match "$1" "[0-9]\+.[0-9]\+$" > /dev/null; then
					iso_url=$(ubuntu-release $1)
				else
					iso_url="$1"
				fi
			fi
		fi
	fi

	iso_base=$(basename $iso_url)
	base=$(basename $iso_url .iso)
	iso=$(find ${MYDIR}/downloads/ -name "$iso_base")
	if [ ! -e "$iso" ]; then
		wget -nc $iso_url -P ${MYDIR}/downloads/ || return
		iso=${MYDIR}/downloads/$iso_base
	fi
	# TODO: use mktemp -d
	mnt=$(mktemp -d mount.XXX)
	sudo mkdir -p $mnt
	sudo mount $iso $mnt -o user,ro
	cat $mnt/.disk/*info
	echo
	read a b c < $mnt/.disk/*info
	auto=${base}-auto-install
	if [ ! -e $auto ]; then
		cp -a $mnt $auto
		chmod -R +w $auto
	fi
	sudo umount $mnt
	kickstart-cfg $auto
	cat >> $auto/ks.cfg <<-EOF
	%post --nochroot
	mkdir -p /target/home/${loginuser}/.ssh/
	echo $(cat /opt/mkiso/common/authorized_keys) >> /target/home/${loginuser}/.ssh/authorized_keys
	echo $(cat /opt/mkiso/common/authorized_keys) >> /target/root/.ssh/authorized_keys
	chown -R ${loginuser} /target/home/${loginuser}/.ssh/
	setv() { sed -i "s/^\(\$2=\).*/\1\$3/" \$1; }
	cd /target/etc/default
	setv grub GRUB_CMDLINE_LINUX_DEFAULT ""
	cd -
	chroot /target update-grub
	%end
	EOF
	mkisofs -q -disable-deep-relocation -rational-rock -cache-inodes -joliet \
		-full-iso9660-filenames -no-emul-boot -boot-load-size 4 -boot-info-table \
		-eltorito-boot isolinux/isolinux.bin -eltorito-catalog isolinux/boot.cat \
		-o $auto.iso $auto
	rm -rf $mnt $auto
	#echo Created $auto.iso
	#echo Run test installation with:
	#echo qemu-img create -f qcow2 $auto.qcow2 10G
	#echo qemu-system-x86_64 -smp 2 -enable-kvm -m 4G --cdrom $auto.iso $auto.qcow2
	/bin/mv $auto.iso /tmp/${auto}.${hostname}.iso
	echo "created /tmp/${auto}.${hostname}.iso"

	# References:
	# http://askubuntu.com/questions/122505/how-do-i-create-a-completely-unattended-install-of-ubuntu
	# https://help.ubuntu.com/lts/installation-guide/i386/ch04s06.html
	# https://help.ubuntu.com/community/KickstartCompatibility
}

function kickstart-cfg()
{
	cat << EOF > /tmp/setperm.sh
#!/bin/sh

# Set permissions on /home/${loginuser}/.ssh/
chown -R ${loginuser}:${loginuser} /home/${loginuser}
chmod 700              /home/${loginuser}/.ssh /home/${loginuser}/.ssh/*
chmod 755 /tmp/setperm.sh
EOF

	mkdir -p $1/files/install.d $1/files/data
	cp -r /opt/mkiso/common/* $1/files/

	if [ -d "${SPECIFIC_HOSTDIR}/data" ]; then
		cp -r ${SPECIFIC_HOSTDIR}/data/* $1/files/data
	fi
	if [ -d "${SPECIFIC_HOSTDIR}/install.d" ]; then
		/bin/mv /tmp/setperm.sh ${SPECIFIC_HOSTDIR}/install.d/
		cp -r ${SPECIFIC_HOSTDIR}/install.d/* $1/files/install.d
	else
		/bin/mv /tmp/setperm.sh $1/files/install.d
	fi

	# TODO fix so is files from specific/.../
	echo en > $1/isolinux/lang
	cat > $1/isolinux/isolinux.cfg <<- EOF
		default install
		label install
		  menu label ^Install Ubuntu Server
		  kernel /install/vmlinuz
		  append file=/cdrom/preseed/ubuntu-server.seed initrd=/install/initrd.gz ks=cdrom:/ks.cfg preseed/file=/cdrom/ks.preseed --
	EOF
	cat > $1/ks.cfg <<- EOF
		lang en_US.UTF-8
		keyboard dk
		timezone $(cat /etc/timezone)
		rootpw --disabled
		user ${loginuser} --fullname ${loginuser} --password ${password}
		text
		install
		cdrom
		bootloader --location=mbr
		zerombr yes
		clearpart --all --initlabel
		auth --useshadow --enablemd5
		firewall --disabled
		skipx
		reboot
	EOF
	cat > $1/ks.preseed <<-EOF
		d-i debian-installer/locale                              string      en_GB.UTF-8
		d-i console-setup/ask_detect                             false
		d-i keyboard-configuration/layoutcode                    string      dk
		d-i keyboard-configuration/layout                        select      Danish
		d-i keyboard-configuration/modelcode                     string      pc105
		d-i console-keymaps-at/keymap                            select      dk
		d-i keyboard-configuration/xkb-keymap                    select      dk
		d-i netcfg/choose_interface                              select      auto
		d-i netcfg/dhcp_timeout                                  string      5
		d-i netcfg/get_hostname                                  string      ${hostname}
		d-i netcfg/get_domain                                    string      ${domainname}
		d-i user-setup/allow-password-weak                       boolean     true
		d-i partman/confirm boolean                                          true
		d-i partman-partitioning/confirm_write_new_label         boolean     true
		d-i partman/choose_partition                             select      finish
		d-i partman/confirm_nooverwrite                          boolean     true
		d-i pkgsel/include string
		d-i pkgsel/include string openssh-server wget
		d-i preseed/late_command                                 string cp -r /cdrom/files/ /target/root; sed -i 's_exit 0_sh /root/files/install.sh_' /target/etc/rc.local; 

	EOF
}

function main()
{

	echo=/bin/echo
	case ${N}$C in
		"") if $echo "\c" | grep c >/dev/null 2>&1; then
			N='-n'
		else
			C='\c'
		fi ;;
	esac

	#
	# Process arguments
	#
	while getopts vu:s: opt
	do
	case $opt in
		v)      echo "version $VERSION"
		;;
		u)      UBUNTU_VERSION=$OPTARG
		;;
		s)      SPECIFIC_HOSTDIR=$OPTARG
		;;
		*)      echo "${USAGE}"
			exit
		;;
	esac
	done
	shift `expr $OPTIND - 1`

	# UBUNTU_VERSION=$1
	# SPECIFIC_HOSTDIR=$2

	test -z "${UBUNTU_VERSION}" && {
		echo "Ubuntu base version e.g. 16.04 missing"
		echo "${USAGE}"
		exit
	}

	test -z "${SPECIFIC_HOSTDIR}" && {
		echo "Specific configuration parameter missing"
		echo "${USAGE}"
		exit
	}

	SPECIFIC_HOSTDIR="${MYDIR}/specific/${SPECIFIC_HOSTDIR}"

	test -f "${SPECIFIC_HOSTDIR}/host.config" || {
		echo "Specific configuration '${SPECIFIC_HOSTDIR}/host.config' missing"
		echo "${USAGE}"
		exit
	}

	test -d "${SPECIFIC_HOSTDIR}/install.d" || {
		echo "Specific configuration '${SPECIFIC_HOSTDIR}/install.d' dir missing"
		echo "${USAGE}"
		exit
	}

	. ${SPECIFIC_HOSTDIR}/host.config

	mkautoiso "${UBUNTU_VERSION}"

	exit
}

################################################################################
# main
################################################################################

USAGE="usage $0 -u <ubuntu version> [ -s <specific/hostdir> ]"

# pwhash=$(echo $password | mkpasswd -s -m sha-512)
# pw="$6$AkVBJP5Qm$bV4BRxQts.T3Ou5c9w4hmkCPVCtO3SJ.stw6xcnbLq/Oi.RCdV45U9dKiuG9SUPthR.4tXjZx07.zcJ5xHeoT."
# --iscrypted

MYDIR="/opt/mkiso/"

main $@

exit 0

