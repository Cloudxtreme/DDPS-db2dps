#!/usr/bin/perl -w
#
# TODO: The kill switch must write information back to the database
#
# $Header$
#
#++
##### Name kill_switch_restart_all_exabgp
#
# Restart all exabgp to flush BGP announcements
#
##### Synopsis
# 
#  ``kill_switch_restart_all_exabgp [-V] [-v] [-n] ``
# 
#### Description
#
# ``kill_switch_restart_all_exabgp`` reads the list ob BGP hosts from the same
# configuration / ini file as ``db2dps`` and for each host stop and start the
# exabgp service, thereby resetting the announcements.
#
#### Options
#
#   - **-V**: print version information and exit
#   - **-v**: verbose 
#
#### Author
#
# Niels Thomas Haugård, niels.thomas.haugaard@i2.dk
#
#### Bugs
#
# Probably. Please report them to the author or the DDPS group.
#
#--

#
# Requirements
#
use strict;
use warnings;
use sigtrap qw(die normal-signals);

use Sys::Syslog;		# only needed for logit
use POSIX;				# only needed for logit
use Getopt::Long qw(:config no_ignore_case);
use Net::SSH2;			# ssh v2 access to postgres db

#
# prototypes
#
sub main(@);
sub mydie(@);

#
# Global vars
#
my $usage = "\n$0 [-v | -n ] \n";

my $section;
my %data;
my $verbose = "";
my $noexec = "";

# included from version.pm
my $version = "1.0-91";
my $build_date = "2017-10-04 11:31";
my $build_git_sha = "b73497419295136d33887f8c1fe921f0a24ec65d";

my $show_version = 0;

my $inicfg	= "/opt/db2dps/etc/db.ini";

################################################################################
# MAIN
################################################################################

main();

exit(0);

#
# Subs
#
sub main(@)
{
	if (!GetOptions(
		'inicfg|f=s'		=> \$inicfg,
		'verbose|v'			=> \$verbose,
		'noexec|n'			=> \$noexec,
		'show_version|V'	=> \$show_version
	))
	{
		print<<"EOF";

	Usage:
		$0 [-v|-n][-f file]
		$0 -V
		
		-V: print version and exit
		-v: be verbose
		-f file: use config file

EOF
		exit 0;
	}

	logit("verbose		= $verbose");
	
	# Check arguments
	if ($show_version eq 1)
	{
		print "version:       $version\n";
		print "build date:    $build_date\n";
		print "build_git_sha: $build_git_sha\n";
		print "inicfg:        $inicfg\n";
		print "This version only handles IPv4 by design\n";
		exit 0;
	}

	open my $fh, '<', $inicfg or mydie "Could not open '$inicfg' $!";

	while (my $line = <$fh>)
	{
		if ($line =~ /^\s*#/) {
			next;		# skip comments
		}
		if ($line =~ /^\s*$/) {
			next;		# skip empty lines
		}

		if ($line =~ /^\[(.*)\]\s*$/) {
			$section = $1;
			next;
		}

		if ($line =~ /^([^=]+?)\s*=\s*(.*?)\s*$/) {
			my ($field, $value) = ($1, $2);
			if (not defined $section) {
				logit("Error in '$inicfg': Line outside of seciton '$line'");
				next;
			}
			$data{$section}{$field} = $value;
		}
	}

	close ($fh);

	my $hostlist = $data{'general'}{'hostlist'};

	logit("hostlist = $hostlist");
	my @hostlist = split(' ', $hostlist);

	my $stopcmd		= "sudo service exabgp stop";
	my $startcmd	= "sudo service exabgp start";
	my $statcmd		= "sudo service exabgp status";
	my $noexeccmd	= "sudo whoami";

	my @commands;
	if ($noexec)
	{
		push(@commands, $noexeccmd);
		push(@commands, $statcmd);
	}
	else
	{
		push(@commands, $stopcmd);
		push(@commands, $startcmd);
		push(@commands, $statcmd);
	}

	foreach my $cmd (@commands)
	{
		foreach my $host (@hostlist)
		{
			logit("---------- $host '$cmd' ----------");
			my $sshuser			= $data{$host}{'sshuser'};			$sshuser =~ tr/\"//d;
			my $identity_file	= $data{$host}{'identity_file'};	$identity_file =~ tr/\"//d;
			my $public_key		= $data{$host}{'public_key'};		$public_key =~ tr/\"//d;
			logit("ssh $sshuser\@$host -i $public_key '$cmd'");

				my $ssh2 = Net::SSH2->new(timeout => 100);
				if (! $ssh2->connect($host))
				{
					mydie("Failed connection to $host");
				}
				if (! $ssh2->auth_publickey($sshuser,$public_key,$identity_file) )
    	        {
    	            mydie("FAILED SCP public/private key authentication for $sshuser to $host");
    	        }

				my $chan = $ssh2->channel();
				$chan->blocking(0);
				$chan->exec("$cmd \n");
				while (<$chan>)
				{
					chomp $_;
					logit("$_");
				}
				$ssh2->disconnect();
				logit("---------- done ----------");
		}
	}
	logit("bye");
}

#
# subs below
#
sub logit(@)
{
    my $msg = join(' ', @_);
    syslog("user|err", "$msg");
    my $now = strftime "%H:%M:%S (%Y/%m/%d)", localtime(time);
    print STDOUT "$now: $msg\n" if ($verbose);

    #open(LOGFILE, ">>$logfile");
    #print LOGFILE "$now: $msg\n";
    #close(LOGFILE);
}

sub mydie(@)
{
    logit(@_);
    exit(0);
}


__DATA__

#
#   Copyright 2017, DeiC, Niels Thomas Haugård
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
#
