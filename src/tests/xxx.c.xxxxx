/*
 * fra http://stackoverflow.com/questions/17954432/creating-a-daemon-in-linux
 * Signal handling, se http://www.thegeekstuff.com/2012/03/catch-signals-sample-c-code/
 * daemonize.c
 */

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <signal.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <syslog.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <libpq-fe.h>
#include <unistd.h>
#include <syslog.h>

#include "iniparser.h"
#include "debug.h"

#define PROGNAME "db2dps"

#define _GNU_SOURCE         /* See feature_test_macros(7) */

//Safer asprintf macro
#define Sasprintf(write_to, ...) { \
	char *tmp_string_for_extend = (write_to); \
	asprintf(&(write_to), __VA_ARGS__); \
	free(tmp_string_for_extend); \
}
dictionary  *   ini ;
const char  *   db ;
const char  *   dbuser ;
const char  *   dbpass ;
const char  *   newrules ;
const char  *   remove_expired_rules ;
const char	*	hostlist;
const char	*	identity_file;
const char	*	sshuser;
const char	*	exabgp_pipe;

char	* ini_name = "/tmp/db.ini";
int	verbose = 0;

int asprintf(char **strp, const char *fmt, ...);
void do_exit(PGconn *conn);
void usage();
static void daemonize();

int main(int argc, char * argv[])
{
	while ((argc > 1) && (argv[1][0] == '-'))
	{
		switch (argv[1][1])
		{
			case 'v':
				verbose = 1;
				break;

			case 'd':
				printf("daemonizing ... \n");
				verbose = 0;
				daemonize();
				break;

			default:
				printf("Wrong Argument: %s\n", argv[1]);
				usage();
		}

		++argv;
		--argc;
	}

    while (1)
	{

		if (verbose == 1) 
		{
			fprintf(stdout, "%s starting, sleeping 20 seconds ... \n", PROGNAME );
			fflush(stdout);
		}

		sleep(20);	/* start by sleeping in case of error(s) in the ini file -- using continue */

		/* (1) Read configuration from INI file */

		openlog(PROGNAME, LOG_PID|LOG_CONS, LOG_USER);

		ini = iniparser_load(ini_name);
		if (ini==NULL) {
			fprintf(stderr, "cannot parse file: %s\n", ini_name);
			syslog(LOG_INFO, "cannot parse file: %s", ini_name);
			syslog(LOG_INFO, "please fix the file: %s", ini_name);
			continue;	
		}

		#ifdef DO_DEBUG
		DEBUG_TRACE("iniparser_dump" );
		iniparser_dump(ini, stdout);
		#endif

		/* exit if get db attributes fails */
		db = iniparser_getstring(ini, "db:dbname", NULL);
		if (db==NULL) { syslog(LOG_INFO, "failed reading dbname section from inifile: %s\n", ini_name); closelog(); continue ; }

		dbuser = iniparser_getstring(ini, "db:dbuser", NULL);
		if (dbuser==NULL) { syslog(LOG_INFO, "failed reading 'dbuser' from db section: %s\n", ini_name); closelog(); continue ; }

		dbpass = iniparser_getstring(ini, "db:dbpassword", NULL);
		if (dbpass==NULL) { syslog(LOG_INFO, "failed reading 'dbpassword' from db section: %s\n", ini_name); closelog(); continue ; }

		newrules = iniparser_getstring(ini, "db:newrules", NULL);
		if (newrules==NULL) { syslog(LOG_INFO, "failed reading 'newrules' from db section: %s\n", ini_name); closelog(); continue ; }

		remove_expired_rules = iniparser_getstring(ini, "db:remove_expired_rules", NULL);
		if (remove_expired_rules==NULL) { syslog(LOG_INFO, "failed reading 'remove_expired_rules' from db section: %s\n", ini_name); closelog(); continue ; }

		hostlist = iniparser_getstring(ini, "ssh:hostlist", NULL);
		if (hostlist==NULL) { syslog(LOG_INFO, "failed reading 'hostlist' from ssh section: %s\n", ini_name); closelog(); continue ; }

		identity_file = iniparser_getstring(ini, "ssh:identity_file", NULL);
		if (identity_file==NULL) { syslog(LOG_INFO, "failed reading 'identity_file' from ssh section: %s\n", ini_name); closelog(); continue ; }

		exabgp_pipe = iniparser_getstring(ini, "ssh:exabgp_pipe", NULL);
		if (exabgp_pipe==NULL) { syslog(LOG_INFO, "failed reading 'exabgp_pipe' from ssh section: %s\n", ini_name); closelog(); continue ; }

		sshuser = iniparser_getstring(ini, "ssh:sshuser", NULL);
		if (sshuser==NULL) { syslog(LOG_INFO, "failed reading 'sshuser' from ssh section: %s\n", ini_name); closelog(); continue ; }

		/* (2) Connect to the database */
		char * dblogin = NULL;

		Sasprintf(dblogin, "user=%s password=%s dbname=%s", dbuser, dbpass, db);

		syslog(LOG_INFO, "database: %s, user: %s, etc. read from %s", db, dbuser, ini_name );

		#ifdef DO_DEBUG
		DEBUG_TRACE("dblogin = %s", dblogin );
		#endif

		PGconn *conn = PQconnectdb(dblogin);

		if (PQstatus(conn) == CONNECTION_BAD) {
			syslog(LOG_INFO, "Connection to database failed: %s\n", PQerrorMessage(conn));
			#ifdef DO_DEBUG
			DEBUG_TRACE("Connection to database failed: %s", PQerrorMessage(conn));
			#endif
			PQfinish(conn);
			iniparser_freedict(ini);
			closelog();
			exit(EXIT_SUCCESS);
		}

		/* (3) retreive new rules - if any */
		PGresult *res = PQexec(conn, newrules);

		if (PQresultStatus(res) != PGRES_TUPLES_OK) {

			syslog(LOG_INFO, "No data retrieved\n");        
			PQclear(res);
			PQfinish(conn);
			iniparser_freedict(ini);
			closelog();
			exit(EXIT_SUCCESS);
		}    

		int nfields = PQnfields(res);
		int ntuples = PQntuples(res);

		/*
		**        flowspecruleid direction destinationprefix sourceprefix ipprotocol srcordestport destinationport sourceport icmptype icmpcode tcpflags packetlength dscp fragmentencoding
		** nfield 0              1         2                 3            4          5             6               7          8        9        10       11           12   13    
		*/
		const char *strings[] = {
			"flowspecruleid", "direction", "destinationprefix", "sourceprefix",
			"ipprotocol", "srcordestport", "destinationport", "sourceport",
			"icmptype", "icmpcode", "tcpflags", "packetlength",
			"dscp", "fragmentencoding"
			};

		//	TODO: reformat and send it to each exabgp with ssh
		// for each host in ssh:hostlist do;
		// ssh host 'cat $info > pipe' 
		for(int i = 0; i < ntuples; i++) {
			for(int j = 0; j < nfields; j++) {
				printf("ntuples[%d],nfields[%d] %s %s ", i, j, strings[j], PQgetvalue(res, i, j));
			}
			printf("\n");
		}
		PQclear(res);

		/* (4) process expired rules - if any */

		res = PQexec(conn, remove_expired_rules);

		if (PQresultStatus(res) != PGRES_TUPLES_OK) {

			syslog(LOG_INFO, "No data retrieved\n");        
			PQclear(res);
			PQfinish(conn);
			iniparser_freedict(ini);
			closelog();
			exit(EXIT_SUCCESS);
		}    

		nfields = PQnfields(res);
		ntuples = PQntuples(res);

		//	TODO: reformat and send it to each exabgp with ssh
		for(int i = 0; i < ntuples; i++) {
			for(int j = 0; j < nfields; j++) {
				printf("ntuples[%d],nfields[%d] %s %s ", i, j, strings[j], PQgetvalue(res, i, j));
			}
			printf("\n");
		}
		PQclear(res);


		/* (5) close down */

		PQfinish(conn);

		iniparser_freedict(ini);

		syslog (LOG_NOTICE, "data processed, sleeping 10 seconds ... ");
		closelog();
	}
	return EXIT_SUCCESS;
}

/*
 ** functions
 */

static void daemonize()
{
    pid_t pid;

    /* Fork off the parent process */
    pid = fork();

    /* An error occurred */
    if (pid < 0)
        exit(EXIT_FAILURE);

    /* Success: Let the parent terminate */
    if (pid > 0)
        exit(EXIT_SUCCESS);

    /* On success: The child process becomes session leader */
    if (setsid() < 0)
        exit(EXIT_FAILURE);

    /* Catch, ignore and handle signals */
    //TODO: Implement a working signal handler */
	/* see http://www.thegeekstuff.com/2012/03/catch-signals-sample-c-code/ */
    signal(SIGCHLD, SIG_IGN);
    signal(SIGHUP, SIG_IGN);

    /* Fork off for the second time*/
    pid = fork();

    /* An error occurred */
    if (pid < 0)
        exit(EXIT_FAILURE);

    /* Success: Let the parent terminate */
    if (pid > 0)
        exit(EXIT_SUCCESS);

    /* Set new file permissions */
    umask(0);

    /* Change the working directory to the root directory */
    /* or another appropriated directory */
    chdir("/");

    /* Close all open file descriptors */
    int x;
    for (x = sysconf(_SC_OPEN_MAX); x>0; x--)
    {
        close (x);
    }

    /* Open the log file */
    openlog (PROGNAME, LOG_PID, LOG_DAEMON);
}

void do_exit(PGconn *conn) {

	PQfinish(conn);
	iniparser_freedict(ini);
	closelog();
	exit(EXIT_FAILURE);
}

void usage(void)
{
	printf("Usage:\n");
	printf(" -d daemonize\n");
	printf(" -v verbose - no daemonize\n");
	exit (EXIT_SUCCESS);
}

